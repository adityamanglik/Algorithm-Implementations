#include <iostream>#include <vector>using namespace std;class DisjointSet_AM {private:    vector<int> parent;    vector<int> sizes;public:    int findRoot(int i) {        int x = i;        while (parent[i] != i)            i = parent[i];        parent[x] = i;//Path compression        return i;    }    void UnionByRank(int i, int j) {        i = findRoot(i);        j = findRoot(j);        if (i == j)            return;        if (sizes[i] > sizes[j]) {//Union by Rank            parent[j] = i;            sizes[i] += sizes[j];        } else {            parent[i] = j;            sizes[j] += sizes[i];        }    }    DisjointSet_AM(int n = 10) {        //Initialize the set        for (int i = 0; i < n; ++i) {            parent.push_back(i);            sizes.push_back(1);        }    }    virtual ~DisjointSet_AM() {        //Nothing to destroy    }    void printDisjointSet() {        for (int i = 0; i < parent.size(); ++i) {            cout << parent[i] << " " << sizes[i] << endl;        }    }    bool ifConnected(int i, int j) {        i = findRoot(i);        j = findRoot(j);        if (i == j)            return true;        return false;    }};int main() {    ios_base::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    DisjointSet_AM ds(5);    ds.printDisjointSet();    ds.UnionByRank(1, 4);    ds.printDisjointSet();    ds.UnionByRank(2, 3);    ds.printDisjointSet();    ds.UnionByRank(1, 5);    ds.printDisjointSet();    return 0;}